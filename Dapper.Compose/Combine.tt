<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var count = 32; #>
using System;

namespace Dapper.Compose
{
    public static partial class Query
    {
<# for (var i = 1; i < count; ++i) { #>
        /// <summary>
        /// Combine <#=i#> subqueries into a multiquery.
        /// </summary>
        /// <param name="selector">Build the return value for the set of subqueries.</param>
        /// <typeparam name="T0">Return type of query <paramref name="q0" />.</typeparam>
        /// <param name="q0">Query #0 in the multiquery.</param>
<# for (int j = 1; j <= i; ++j) { #>
        /// <typeparam name="T<#=j#>">Return type of <paramref name="q<#=j#>" />.</typeparam>
        /// <param name="q<#=j#>">Query #<#=j#> in the multiquery.</param>
<# } #>
        /// <typeparam name="TResult">The final return.</typeparam>
        /// <returns>A value constructed from the various subqueries.</returns>
        public static MultiQuery<TResult> Combine<T0<# for (int j = 1; j <= i; ++j){#>, T<#=j#><# } #>, TResult>(Query<T0> q0<# for (int j = 1; j <= i; ++j){#>, Query<T<#=j#>> q<#=j#><# } #>, Func<T0<# for (int j = 1; j <= i; ++j){#>, T<#=j#><# } #>, TResult> selector)
        {
            return new MultiQuery<TResult>(
				x => selector(q0.Read(x)<# for (int j = 1; j <= i; ++j){#>, q<#=j#>.Read(x)<# } #>),
				async x => selector(await q0.ReadAsync(x)<# for (int j = 1; j <= i; ++j){#>, await q<#=j#>.ReadAsync(x)<# } #>),
				q0.Sql <# for (int j = 1; j <= i; ++j){#> + "\r\n" + q<#=j#>.Sql<# } #>);
        }

<# } #>
	}
<# for (var i = 16; i < count; ++i) { #>

    /// <summary>
    /// Parameterized delegate.
    /// </summary>
    /// <typeparam name="T0">Return type of query <paramref name="arg0" />.</typeparam>
    /// <typeparam name="TResult">Return type of the function.</typeparam>
    /// <param name="arg0">Parameter #0 of the function.</param>
<# for (int j = 1; j <= i; ++j) { #>
    /// <typeparam name="T<#=j#>">Type of parameter <paramref name="arg<#=j#>" />.</typeparam>
    /// <param name="arg<#=j#>">Parameter #<#=j#> of the function.</param>
<# } #>
    /// <returns>A value constructed from the various subqueries.</returns>
	public delegate TResult Func<T0<# for (int j = 1; j <= i; ++j){#>, T<#=j#><# } #>, TResult>(T0 arg0<# for (int j = 1; j <= i; ++j){#>, T<#=j#> arg<#=j#><# } #>);
<# } #>
}